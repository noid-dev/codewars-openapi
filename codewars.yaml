openapi: 3.0.3
info:
  version: 1.0.0
  title: Codewars API
  contact:
    url: https://github.com/noid-dev/codewars-openapi
  license:
    name: MIT
    url: https://github.com/noid-dev/codewars-openapi/blob/main/LICENSE
  description: |
    Codewars API documentation - [https://dev.codewars.com](https://dev.codewars.com)
servers:
  - url: https://www.codewars.com
security: []
paths:
  /api/v1/users/{user}:
    get:
      summary: Get user information.
      operationId: getUser
      description: Returns information about the user.
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/UserParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                success:
                  $ref: '#/components/examples/UserExample'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /api/v1/users/{user}/code-challenges/completed:
    get:
      summary: List challenges completed by the user.
      operationId: listCompletedChallenges
      description: |
        Returns a list of code challenges completed by the user (200 items per page).  Use the *page* parameter to access items on other pages.
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/UserParam'
        - $ref: '#/components/parameters/PageParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletedChallenges'
              examples:
                success:
                  $ref: '#/components/examples/CompletedChallengesExample'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /api/v1/users/{user}/code-challenges/authored:
    get:
      summary: List challenges authored by the user.
      operationId: listAuthoredChallenges
      description: Returns a list of all code challenges authored by the user.
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/UserParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthoredChallenges'
              examples:
                success:
                  $ref: '#/components/examples/AuthoredChallengesExample'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /api/v1/code-challenges/{challenge}:
    get:
      summary: Get code challenge information.
      operationId: getCodeChallenge
      description: Returns information about the code challenge.
      tags:
        - Code Challenges
      parameters:
        - $ref: '#/components/parameters/ChallengeParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeChallenge'
              examples:
                success:
                  $ref: '#/components/examples/CodeChallengeExample'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
components:
  parameters:
    UserParam:
      name: user
      in: path
      required: true
      description: Username or ID.
      schema:
        type: string
    PageParam:
      name: page
      in: query
      description: The page offset. Each page contains at most 200 items.
      schema:
        type: integer
        default: 0
    ChallengeParam:
      name: challenge
      in: path
      required: true
      description: ID or slug.
      schema:
        type: string
  schemas:
    UserRank:
      type: object
      description: Overall rank.
      properties:
        rank:
          type: integer
          description: Rank in integer. [-8, -1] maps to kyu, [1, 8] maps to dan.
        name:
          type: string
          description: Either {-rank} kyu or {rank} dan.
        color:
          type: string
          description: |
            The color of the rank. Possible colors are white (7-8 kyu), yellow (5-6 kyu), 
            blue (3-4 kyu), purple (1-2 kyu), black (1-4 dan), and red (5-8 dan).
        score:
          type: integer
          description: The total score earned. This is the number that determines the rank.
    LanguageRank:
      type: object
      description: Ranks for each language trained.
      additionalProperties:
        $ref: '#/components/schemas/UserRank'
    UserRanks:
      type: object
      description: Ranks object with overall and language ranks.
      properties:
        overall:
          $ref: '#/components/schemas/UserRank'
        languages:
          $ref: '#/components/schemas/LanguageRank'
    UserStatistics:
      type: object
      description: |
        Object with fields totalAuthored and totalCompleted for the number 
        of authored and completed kata respectively.
      properties:
        totalAuthored:
          type: integer
          description: The total number of authored kata.
        totalCompleted:
          type: integer
          description: The total number of completed kata.
    User:
      type: object
      properties:
        id:
          type: string
          description: ID of the user.
        username:
          type: string
          description: Username of the user.
        name:
          type: string
          nullable: true
          description: Name of the user.
        honor:
          type: integer
          description: Total honor points earned by the user.
        clan:
          type: string
          nullable: true
          description: Name of the clan.
        leaderboardPosition:
          type: integer
          nullable: true
          description: The user's position on the overall leaderboard.
        skills:
          type: array
          nullable: true
          description: Array of skills entered by the user.
          items:
            type: string
        ranks:
          $ref: '#/components/schemas/UserRanks'
        codeChallenges:
          $ref: '#/components/schemas/UserStatistics'
    Error:
      type: object
      properties:
        success:
          type: boolean
          description: Operation outcome.
        reason:
          type: string
          description: Reason for the outcome.
    CompletedChallenge:
      type: object
      properties:
        id:
          type: string
          description: ID of the kata.
        name:
          type: string
          description: Name of the kata.
        slug:
          type: string
          description: Slug of the kata.
        completedAt:
          type: string
          description: Date and time of the completion.
        completedLanguages:
          type: array
          description: Array of languages a user completed in.
          items:
            type: string
    CompletedChallenges:
      type: object
      properties:
        totalPages:
          type: integer
          description: Total number of pages.
        totalItems:
          type: integer
          description: Total number of completed challenges.
        data:
          type: array
          description: Arrays of completed challenges.
          items:
            $ref: '#/components/schemas/CompletedChallenge'
    AuthoredChallenge:
      type: object
      properties:
        id:
          type: string
          description: ID of the kata.
        name:
          type: string
          description: Name of the kata.
        description:
          type: string
          description: Description of the kata in Markdown.
        rank:
          type: integer
          description: Rank of the kata if approved.
          nullable: true
        rankName:
          type: string
          description: Rank name of the kata if approved.
          nullable: true
        tags:
          type: array
          description: Array of tags associated with the kata.
          items:
            type: string
        languages:
          type: array
          description: Array of language names the kata is available in.
          items:
            type: string
    AuthoredChallenges:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AuthoredChallenge'
    CodeChallengeRank:
      type: object
      description: Object describing the rank of the kata if approved.
      properties:
        id:
          type: integer
          nullable: true
          description: Rank in integer. [-8, -1] maps to kyu, [1, 8] maps to dan.
        name:
          type: string
          nullable: true
          description: Either {-rank} kyu or {rank} dan.
        color:
          type: string
          nullable: true
          description: |
            The color of the rank. Possible colors are white (7-8 kyu), yellow (5-6 kyu), 
            blue (3-4 kyu), purple (1-2 kyu), black (1-4 dan), and red (5-8 dan).
    CodeChallengeContributor:
      type: object
      description: The author of the kata.
      properties:
        username:
          type: string
          description: Username of the user.
        url:
          type: string
          description: URL of the user's profile.
    CodeChallengeStatistics:
      type: object
      description: Object with fields issues and suggestions.
      properties:
        issues:
          type: integer
          description: The number of unresolved issues.
        suggestions:
          type: integer
          description: The number of suggestions.
    CodeChallenge:
      type: object
      properties:
        id:
          type: string
          description: ID of the kata.
        name:
          type: string
          description: Name of the kata.
        slug:
          type: string
          description: Slug of the kata.
        url:
          type: string
          description: URL of the kata.
        category:
          type: string
          description: Category of the kata.
        description:
          type: string
          description: Description of the kata in Markdown.
        tags:
          type: array
          description: Array of tags associated with the kata.
          items:
            type: string
        languages:
          type: array
          description: Array of language names the kata is available in.
          items:
            type: string
        rank:
          $ref: '#/components/schemas/CodeChallengeRank'
        createdBy:
          $ref: '#/components/schemas/CodeChallengeContributor'
        createdAt:
          type: string
          description: Date and time when the kata was created.
        publishedAt:
          type: string
          nullable: true
          description: Date and time when the kata was first published.
        approvedBy:
          $ref: '#/components/schemas/CodeChallengeContributor'
        approvedAt:
          type: string
          description: Date and time when the kata was approved.
        totalCompleted:
          type: integer
          description: Total number of completions.
        totalAttempts:
          type: integer
          description: Total number of attempts.
        totalStars:
          type: integer
          description: The number of bookmarks.
        voteScore:
          type: integer
          description: The sum of all votes casted.
        contributorsWanted:
          type: boolean
          description: Whether to allow contributions.
        unresolved:
          $ref: '#/components/schemas/CodeChallengeStatistics'
  examples:
    UserExample:
      value:
        id: 508f2708b3be0c0200000001
        username: some_user
        name: Some Person
        honor: 544
        clan: some clan
        leaderboardPosition: 134
        skills:
          - ruby
          - c#
          - .net
          - javascript
          - coffeescript
          - nodejs
          - rails
        ranks:
          overall:
            rank: -3
            name: 3 kyu
            color: blue
            score: 2116
          languages:
            javascript:
              rank: -3
              name: 3 kyu
              color: blue
              score: 1819
            ruby:
              rank: -4
              name: 4 kyu
              color: blue
              score: 1005
            coffeescript:
              rank: -4
              name: 4 kyu
              color: blue
              score: 870
        codeChallenges:
          totalAuthored: 3
          totalCompleted: 230
    ErrorExample:
      value:
        success: false
        reason: some error
    CompletedChallengesExample:
      value:
        totalPages: 1
        totalItems: 1
        data:
          - id: 514b92a657cdc65150000006
            name: Multiples of 3 and 5
            slug: multiples-of-3-and-5
            completedAt: '2017-04-06T16:32:09.388Z'
            completedLanguages:
              - javascript
              - coffeescript
              - ruby
    AuthoredChallengesExample:
      value:
        data:
          - id: 5571d9fc11526780a000011a
            name: The builder of things
            description: For this kata you will be using some meta-programming ...
            rank: -3
            rankName: 3 kyu
            tags:
              - Algorithms
              - Metaprogramming
              - Programming Paradigms
              - Advanced Language Features
              - Fundamentals
              - Domain Specific Languages
              - Declarative Programming
            languages:
              - ruby
              - javascript
              - python
              - coffeescript
          - id: 51ba717bb08c1cd60f00002f
            name: Range Extraction
            description: A format for expressing an ordered list of integers ...
            rank: -4
            rankName: 4 kyu
            tags:
              - Algorithms
              - String Formatting
              - Formatting
              - Logic
              - Strings
            languages:
              - javascript
              - coffeescript
              - ruby
              - go
              - python
              - java
              - haskell
              - csharp
              - cpp
    CodeChallengeExample:
      value:
        id: 5277c8a221e209d3f6000b56
        name: Valid Braces
        slug: valid-braces
        url: https://www.codewars.com/kata/valid-braces
        category: algorithms
        description: Write a function called `validBraces` that takes a string ...
        tags:
          - Algorithms
          - Validation
          - Logic
          - Utilities
        languages:
          - javascript
          - coffeescript
        rank:
          id: -4
          name: 4 kyu
          color: blue
        createdBy:
          username: xDranik
          url: https://www.codewars.com/users/xDranik
        approvedBy:
          username: xDranik
          url: https://www.codewars.com/users/xDranik
        totalAttempts: 4911
        totalCompleted: 919
        totalStars: 12
        voteScore: 512
        publishedAt: '2013-11-05T00:07:31Z'
        approvedAt: '2013-12-20T14:53:06Z'
        createdAt: '2013-12-20T14:53:06Z'
        contributorsWanted: true
        unresolved:
          issues: 1
          suggestions: 0
  responses:
    BadRequest:
      description: Something went wrong.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            error:
              $ref: '#/components/examples/ErrorExample'
    NotFound:
      description: The specified resource could not be found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            error:
              $ref: '#/components/examples/ErrorExample'
    MethodNotAllowed:
      description: You tried to access a resource with an invalid method.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            error:
              $ref: '#/components/examples/ErrorExample'
    NotAcceptable:
      description: You requested a format that isn't JSON.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            error:
              $ref: '#/components/examples/ErrorExample'
    TooManyRequests:
      description: You're making too many API requests.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            error:
              $ref: '#/components/examples/ErrorExample'
    InternalServerError:
      description: We had a problem with our server. Try again later.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            error:
              $ref: '#/components/examples/ErrorExample'
    ServiceUnavailable:
      description: We're temporarily offline for maintenance. Please try again later.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            error:
              $ref: '#/components/examples/ErrorExample'
